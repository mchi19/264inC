Programming Assignment #4

Please read this entire document, including the Useful Information section, before starting your 
assignment or asking for help.

#####Description of Task#####
In this assignment you will be re-creating the basic functionality of three useful Unix programs that 
may be of help to you. You will have to write your own main functions for these each of these programs 
and handle command-line arguments for them. The goals of this assignment include:

#1 Writing your own main(...) functions that are able to handle command-line flags/switches
#2 Understand the basic operation of the well-known programs "echo", "cat", and "grep".
#3 Lean the basic of handling files in C, including:
	#3.a The standard file descriptors "stdin", "stdout", and "stderr".
	#3.b How to open and close a file.
	#3.c How to read and write files character by character ("fgetc" and"fputc").
	#3.d How to read and write files a line at a time ("fgets" and "fprintf").
#4 Be able to compile, run, and test your programs for correctness.
	

In the next 3 sections, we will provide you with explanations on how to implement "echo", "cat", and 
"grep."

example.c is provided to help you understand parsing command-line arguments

#####echo-lite#####
"echo" is a program that prints the arguments that you give it. It behaves just like an echo in that it 
"echoes" back what you give it:

 > echo everybody dance
everybody dance

You must write a program in a single file "echo-lite.c", that prints out the passed command-line 
arguments (except the first) with a single space between each one. Then, print a single new-line 
character before exiting the program. echo-lite always returns EXIT_SUCCESS.

When your program compiles and runs, it should behave like so:

 > ./echo-lite

 > ./echo-lite note that    multiple space becomes 1. 
note that multiple space becomes 1.

 > ./echo-lite but you can use " quotes " to pass along spaces.
but you can use  quotes  to pass along spaces.

 > ./echo-lite --help
--help

There is no help-message for this program (so putting "--help" as an argument will just print "--help". 

You must have "echo-lite" function as described above. Your solution should be about 15 lines of code.

#####cat-lite#####
"cat" is a program that concatenates files and then prints them to standard output. You must write a 
simple version of cat in a file called cat-lite.c. A good solution should be around 70 lines of code.

"cat-lite" must have the following features:

#1  A --help flag/switch. (Ignore other arguments when present.) Print the message below (don't include 
the lines with the "<...>"), and then return EXIT_SUCCESS. The help switch can appear in any position, 
in which case other arguments are ignored. 

<help-message>
Usage: cat-lite [--help] [FILE]... 
With no FILE, or when FILE is -, read standard input (can exit with CTRL+D, play around with "cat" to 
get a sense of how this works).

Examples:
  cat-lite README   Print the file README to standard output.
  cat-lite f - g    Print f's contents, then standard input, 
                    then g's contents.
  cat-lite          Copy standard input to standard output. 
</help-message>

#2 Every argument (other than the --help flag) is treated as a file name. Open each file in turn, and 
print the contents to stdout. (This is easy with fgetc and fputc.)

#3 The "-" argument is interpreted as the special file "stdin". The --help message above should make 
this clear.

#4 If you fail to open one of the files specified in the command-line arguments, then you must print 
to stderr: "cat cannot open %s\n", where %s is replaced with the invalid filename. You must then exit 
the program with EXIT_FAILURE.

For example:

 > ./cat-lite tin
cat cannot open tin

#5 If every file is opened and printed successfully, then return EXIT_SUCCESS.

#####grep-lite#####
"grep" is an amazingly useful program that filters lines of input for specific patterns. It has quite 
a few features, but the ones you need to implement are simplified and listed in the help message. The 
specs for this program is:
 
#1  A --help switch. (Ignore other arguments when present.) Print the message below (not including the 
lines with "<...>"), and then return EXIT_SUCCESS. The help switch can appear in any position, in 
which case other arguments are ignored.

<help-message>
Usage: grep-lite [OPTION]... PATTERN
Search for PATTERN in standard input. PATTERN is a
string. grep-lite will search standard input line by
line, and (by default) print out those lines which
contain pattern as a substring.

  -v, --invert-match     print non-matching lines
  -n, --line-number      print line numbers with output
  -q, --quiet            suppress all output

Exit status is 0 if any line is selected, 1 otherwise;
if any error occurs, then the exit status is 2.
</help-message>

#2 Abort the program if any bogus command-line arguments are passed. You must print an error message 
of your choice (as long as it clearly shows it as an error) to stderr. Your main(...) function must 
return 2.

#3 The user must specify a pattern when they execute grep-lite. PATTERN is always the last argument. 
PATTERN can *never* begin with a '-' character. If the last argument begins with a '-' character, then 
print an error message to stderr, and your main(...) function must return 2.

#4 If the help switch is not specified, and the command-line arguments are good, then you must read 
stdin line by line. IMPORTANT: you can assume that no line is longer than 2000 characters. Use 
"fgets(...)" to read each line.

#5 Use strstr(...) on each read line to determine whether you have a match or not. Look back to PA02 
if you are unsure what strstr(...) is.

#6 By default you select those lines that match. If one or more invert-match switches are present, 
then you select non-matching lines. (Multiple invert-match switches have the same effect as one.)

#7 By default you will print every selected line. If the line-number switch is passed, then 
'printf("%d:", lineNumber)' before printing the selected line. You will need to keep track of 
line-numbers, and the first line of the file is line number 1. (Not 0.) 

#8 If the quiet switch is passed, then you never print anything. You must still return the correct 
exit code.

#9 Your main(...) function should return 0 if there was at least one  matching line, and 1 otherwise.

The grep-lite program can be written in about 100 lines of clear and concise code.


#####Assignment Submission#####
You must submit one zip file to Blackboard. This zip file must contain:

#1 echo-lite.c, your re-implementation for "echo"
#2 cat-lite.c, your re-implementation for "cat"
#3 grep-lite.c, your re-implementation for "grep"


You create the zip file using the following command in the directory the files are in:
 
 > zip pa04.zip echo-lite.c cat-lite.c grep-lite.c

If your zip file does not meet the above specification, then you may get zero for this assignment. YOU 
HAVE BEEN WARNED.  Following the instructions is *part* of getting the assignment correct. So please
follow the instructions.

Once you have created pa04.zip as described, submit it to Blackboard.

#####Grading#####
You must complete all 3 program: grep-lite.c, cat-lite.c, and echo-lite. To get full credit on each of 
these programs must work properly and meet the specifications described in this README. Successfully 
writing grep-lite.c is worth 50%, cat-lite.c is worth 30% and echo-lite.c is 20%.

If your program has any errors that prevent it from executing or compilation warnings, you will fail 
the assignment. If you have memory errors, your point total on this assignment will be deducted by 50% 
(so if you get 70% of the functions correct but you have memory errors, you'll end up getting 35% on 
the assignment). Use Valgrind or the built-in Memory tool on ACCESS to check for memory leaks. When 
using Valgrind in a terminal type the following:

 > valgrind --tool=memcheck --leak-check=full --verbose PROGRAM_NAME PROGRAM_ARGUMENTS

To test the functionality of your programs, you can compare them to the actual programs which are 
pre-installed in every Unix (and Unix-like) installation. While the actual programs may have many 
features, you only need to implement the ones specified in this README.


#####Useful Information#####

###Relevant functions for this assignment###
Look in the lecture notes (and the man pages) for:

fopen, fclose
fgetc, fputc,
fgets,
printf,fprintf,
strstr,

###"stdin","stdout", and "stderr"###

Under normal circumstances, whenever a program launches, the operating system (Windows or Unix) always 
does a few things before handing control over to the computer programmer. Before invoking the main 
function, a computer program is supplied with three "file-descriptors":

#1 "stdin" is for input, and any program can *read* from this input. For example, you would use stdin 
if you wanted to read characters that a human user types into the terminal whilst the program is 
running.
#2 "stdout" is for normal output and (in general) goes to the terminal. Calling printf(...) is the 
*same* as calling fprintf(stdout,...).
#3 "stderr" is for error output. By default stderr will flow onto the terminal along with stdout; 
however, read on...

You get both stdout and stderr, because when you invoke a program you can tell the operating system 
where to direct each output. The following example directs errors to a file "errors.log", and standard
output goes to the terminal:

int main(int argc, char * * argv)
{
    fprintf(stdout, "Printing normal stuff.\n");
    fprintf(stderr, "This is just a DEBUG statement that I "
                    "want printed to stderr, and not stdout\n");
    return EXIT_SUCCESS;
}

 > ./a.out 2>errors.log
Printing normal stuff

 > cat errors.log
This is just a DEBUG statement that I want printed to stderr, and not
stdout

Try this out; it is very useful to know. 

If any assignment (including this one) requires particular output, it will be output to stdout unless 
otherwise specified. In such cases, you can save yourself a lot of time by printing error messages and 
debug statements to stderr.

###Handling command-line arguments###

Once your program has been compiled it cannot change, but that doesn't mean it always has to do the 
same thing every time it runs. You can pass arguments to your program, and in turn, the program can be 
written to look at these arguments and execute in different ways.

The following program prints out the current command-line arguments. Compile and run it to see...

#include <stdio.h>
#include <stdlib.h>

int main(int argc, char * * argv)
{
    int ind;
	
    printf("Printing command-line arguments:\n");
    for(ind = 0; ind < argc; ++ind) {
	printf("   argv[%d] = '%s'\n", ind, argv[ind]);
    }
    printf("Done!\n");

    return EXIT_SUCCESS;
}

This program is very similar to "echo-lite"

###Best way to parse command-line arguments###

The best way is something clear and simple and that *you* understand. Look at the file "example.c" for 
one way of doing so. After compiling this program, run it in multiple ways using different arguments. 
For example:

 > gcc -Wall -Wshadow -g example.c -o icecream

 > ./icecream 
Do you get icecream? Sorry, try again next-time.

 > ./icecream --help
Usage: ./icecream OPTIONS...
   -i, --serve-icecream  Not as exciting as it sounds

 > ./icecream -i
Do you get icecream? YES!!!

 > ./icecream --serve-icecream
Do you get icecream? YES!!!

 > ./icecream blagh
Unknown switch: 'blagh'
Aborting...

You are welcome to use example.c as a starting point for this assignment.

###EXIT_SUCCESS and EXIT_FAILURE###

When your main function finishes it can return a value. (That's why it's "int main(...)" and not "void 
main(...)".) The returned value is called the exit status, and should be a number between 0 and 255 
inclusive.

By convention, EXIT_SUCCESS is 0. When your main(...) function returns EXIT_SUCCESS, you are saying 
that your program ran successfully. EXIT_FAILURE is 1, and, in general, is interpreted as your program 
saying that it failed somehow.

But, and it's a big but, you can return any number [0..255], and can interpret it however you want.

For the grep part of the assignment, you will sometimes return "1" when you successfully find no 
instances of a pattern. Return value "2" is interpreted as a legitimate error. The real grep program 
works this way.
